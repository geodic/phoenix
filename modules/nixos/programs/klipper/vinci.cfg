[stepper_x]
step_pin: PC2
dir_pin: PB9
enable_pin: !PC3
microsteps: 16
rotation_distance: 40.002
endstop_pin: !PA5
position_endstop: -10
position_max: 247
position_min: -15
homing_speed: 50

[stepper_y]
step_pin: PB8
dir_pin: PB7
enable_pin: !PC3
microsteps: 16
rotation_distance: 39.969
endstop_pin: !PA6
position_endstop: -8
position_max: 238
position_min: -13
homing_speed: 50

[stepper_z]
step_pin: PB6
dir_pin: !PB5
enable_pin: !PC3
microsteps: 16
rotation_distance: 8
endstop_pin: probe:z_virtual_endstop
position_max: 270
position_min: -6

[extruder]
step_pin: PB4
dir_pin: PB3
enable_pin: !PC3
microsteps: 16
gear_ratio: 42:12
rotation_distance: 26.359
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PA1
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC5
control: pid
pid_Kp: 23.561
pid_Ki: 1.208
pid_Kd: 114.859
min_temp: 0
max_temp: 300 # Set to 300 for S1 Pro
max_extrude_only_distance: 101 # For extruder calibration
max_extrude_cross_section: 5 # KAMP Purging

[firmware_retraction]
retract_length: 0.8
retract_speed: 30
unretract_extra_length: 0
unretract_speed: 30

[heater_bed]
heater_pin: PA7
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC4
control: pid
pid_Kp: 71.867
pid_Ki: 1.536
pid_Kd: 840.843
min_temp: 0
max_temp: 100 # Set to 110 for S1 Pro

[heater_fan hotend_fan]
pin: PC0
fan_speed: 0.4

[fan]
pin: PA0

[mcu]
serial: /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0
restart_method: command

[printer]
kinematics: cartesian
max_velocity: 500
max_accel: 5000
max_z_velocity: 5
max_z_accel: 100

[bltouch]
sensor_pin: ^PC14
control_pin: PC13
x_offset: -46.8
y_offset: 0.0
# z_offset: 0.0
probe_with_touch_mode: true
stow_on_each_sample: false

[bed_mesh]
speed: 120
mesh_min: 10, 10
mesh_max: 200, 194
probe_count: 4,4
algorithm: bicubic

[safe_z_home]
home_xy_position: 161.8, 114
speed: 75
z_hop: 10
z_hop_speed: 5

[filament_switch_sensor e0_sensor]
switch_pin: !PC15
pause_on_runout: true
runout_gcode: PAUSE

[pause_resume]
recover_velocity: 25

[bed_screws]
screw1: 20, 29
screw2: 195, 29
screw3: 195, 198
screw4: 20, 198

# Mainsail

[virtual_sdcard]
path: /var/lib/moonraker/gcodes

[display_status]

[exclude_object]

[pause_resume]

[skew_correction] 

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####

  {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}



  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  ## Move head and retract only if not already in the pause state and park set to true

  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}



  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg

  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 2.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

# Klipper

[gcode_macro RESTART_]
description: Restart the Klipper host software
gcode:
  RESTART

[gcode_macro RESTART_FIRMWARE]
description: Restart the Klipper firmware
gcode:
  FIRMWARE_RESTART

# Probe

[gcode_macro CALIBRATE_PROBE_Z_OFFSET]
description: Calibrate the Z-Offset using the BLTouch probe
gcode:
  PROBE_CALIBRATE

[gcode_macro TEST_PROBE_ACCURACY]
description: Calibrate the Z-Offset using the BLTouch probe
gcode:
  PROBE_ACCURACY

# Tools

[gcode_macro CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

[gcode_macro PURGE_CLEAN]
description: Purge the nozzle and clean it
gcode:
  {% set PURGE_AMOUNT = params.PURGE_AMOUNT|default(25)|float %}
  
  SAVE_GCODE_STATE NAME=purge_clean_state

  G90 ; use absolute coordinates
  M83 ; extruder relative mode

  CG28 ; conditionally home
  
  G1 X247 F10000 ; move to purging position

  G1 E{PURGE_AMOUNT} F200 ; purge nozzle

  # clean the nozzle
  G1 X220 F10000
  G1 X242 F5000
  G1 X220 F10000
  G1 X242 F5000
  G1 X220 F10000
  G1 X242 F5000
  G1 X220 F10000
  G1 X242 F5000
  G1 X220 F10000

  RESTORE_GCODE_STATE NAME=purge_clean_state

# Print macros

[gcode_macro START_PRINT]
description: Prepare printer for printing
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
  {% set IDLE_TEMP = params.IDLE_TEMP|default(150)|float %}

  G90 ; use absolute coordinates
  M83 ; extruder relative mode

  M104 S{IDLE_TEMP} ; set temporary nozzle temp to prevent oozing during homing
  M140 S{BED_TEMP} ; set final bed temp

  G28 ; home all axis
  BED_MESH_CALIBRATE ; calibrate bed mesh

  G1 X247 F10000 ; park the printhead for final heating
  M104 S{EXTRUDER_TEMP} ; set final nozzle temp
  M190 S{BED_TEMP} ; wait for bed temp to stabilize
  M109 S{EXTRUDER_TEMP} ; wait for nozzle temp to stabilize

  PURGE_CLEAN ; purge the nozzle

  SKEW_PROFILE LOAD=vinci ; load skew profile

[gcode_macro END_PRINT]
description: Prepare printer for printing
gcode:
  SET_SKEW CLEAR=1 ; clear skew profile

  G91 ; relative positioning
  G1 Z20 ; move nozzle up 20mm

  G90 ; absolute positioning
  G1 X0 Y220 ; present print

  M140 S0 ; turn off bed
  M104 S0 ; turn off extruder
  M107 ; turn off fan
  M84 ; disable motors

# Debugging macros

[gcode_macro SEARCH_VARS]
#
# SEARCH_VARS
#
# Dump the printer object so you can find variables of interest
# Credit to https://gist.github.com/mpalpha/ for the original
#
description: Dump the printer object to the console
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}
